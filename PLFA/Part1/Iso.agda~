module Iso where

import relation.binary.propositionalequality as eq
open eq using (_≡_; refl; cong; cong-app)
open eq.≡-reasoning
open import data.nat using (ℕ ; zero ; suc ; _+_)
open import data.nat.properties using (+-comm)

_∘_ : ∀ {a b c : set} → (b → c) → (a → b) → (a → c)
(g ∘ f) x = g (f x)

_∘′_ : ∀ {a b c : set} → (b → c) → (a → b) → (a → c)
(g ∘′ f) = λ x → g (f x)

postulate
 extensionality : ∀ {a b  : set} {f g : a → b}
   → (∀ (x : a) → f x ≡ g x )
   → f ≡ g

_+′_ : ℕ → ℕ → ℕ
m +′ zero = m
m +′ suc n = suc (m + n)

same-app : ∀ (m n : ℕ) → m +′ n ≡ m + n
same-app m n rewrite +-comm m n = helper {!!} {!!}
 where
  helper : ∀ (m n : ℕ) → m +′ n ≡ n + m
  helper m zero = refl
  helper m (suc n) = cong suc ?
