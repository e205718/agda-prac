module nega where

open import Relation.Binary.PropositionalEquality using (_≡_; refl)
open import Data.Nat using (ℕ; zero; suc)
open import Data.Empty using (⊥; ⊥-elim)
open import Data.Sum using (_⊎_; inj₁; inj₂)
open import Data.Product using (_×_)
open import Iso using (_≃_; extensionality)

¬_ : Set → Set
¬ A = A → ⊥

¬-elim : ∀ {A : Set}
 → ¬ A
 → A
 → ⊥
¬-elim ¬x x = ¬x x

¬¬-intro : ∀ {A : Set}
 → A
 → ¬ ¬ A
¬¬-intro x = λ{¬x → ¬x x } 

¬¬-intro' : ∀ { A : Set }
 → A
 → ¬ ¬ A
¬¬-intro' x ¬x = ¬x x

¬¬¬-elim : ∀ {A : Set}
 → ¬ ¬ ¬ A
 → ¬ A
¬¬¬-elim ¬¬¬x = λ x → ;¬¬-intro ?
